(ns aoc-clj.2023.day23-test
  (:require [clojure.test :refer [deftest testing is]]
            [aoc-clj.utils.core :as u]
            [aoc-clj.utils.grid.vecgrid :as vg]
            [aoc-clj.2023.day23 :as t]))

(def d23-s01-raw
  ["#.#####################"
   "#.......#########...###"
   "#######.#########.#.###"
   "###.....#.>.>.###.#.###"
   "###v#####.#v#.###.#.###"
   "###.>...#.#.#.....#...#"
   "###v###.#.#.#########.#"
   "###...#.#.#.......#...#"
   "#####.#.#.#######.#.###"
   "#.....#.#.#.......#...#"
   "#.#####.#.#.#########v#"
   "#.#...#...#...###...>.#"
   "#.#.#v#######v###.###v#"
   "#...#.>.#...>.>.#.###.#"
   "#####v#.#.###v#.#.###.#"
   "#.....#...#...#.#.#...#"
   "#.#########.###.#.#.###"
   "#...###...#...#...#.###"
   "###.###.#.###v#####v###"
   "#...#...#.#.>.>.#.>.###"
   "#.###.###.#.###.#.#v###"
   "#.....###...###...#...#"
   "#####################.#"])

(def d23-s01
  (vg/->VecGrid2D
   [[\# \. \# \# \# \# \# \# \# \# \# \# \# \# \# \# \# \# \# \# \# \# \#]
    [\# \. \. \. \. \. \. \. \# \# \# \# \# \# \# \# \# \. \. \. \# \# \#]
    [\# \# \# \# \# \# \# \. \# \# \# \# \# \# \# \# \# \. \# \. \# \# \#]
    [\# \# \# \. \. \. \. \. \# \. \> \. \> \. \# \# \# \. \# \. \# \# \#]
    [\# \# \# \v \# \# \# \# \# \. \# \v \# \. \# \# \# \. \# \. \# \# \#]
    [\# \# \# \. \> \. \. \. \# \. \# \. \# \. \. \. \. \. \# \. \. \. \#]
    [\# \# \# \v \# \# \# \. \# \. \# \. \# \# \# \# \# \# \# \# \# \. \#]
    [\# \# \# \. \. \. \# \. \# \. \# \. \. \. \. \. \. \. \# \. \. \. \#]
    [\# \# \# \# \# \. \# \. \# \. \# \# \# \# \# \# \# \. \# \. \# \# \#]
    [\# \. \. \. \. \. \# \. \# \. \# \. \. \. \. \. \. \. \# \. \. \. \#]
    [\# \. \# \# \# \# \# \. \# \. \# \. \# \# \# \# \# \# \# \# \# \v \#]
    [\# \. \# \. \. \. \# \. \. \. \# \. \. \. \# \# \# \. \. \. \> \. \#]
    [\# \. \# \. \# \v \# \# \# \# \# \# \# \v \# \# \# \. \# \# \# \v \#]
    [\# \. \. \. \# \. \> \. \# \. \. \. \> \. \> \. \# \. \# \# \# \. \#]
    [\# \# \# \# \# \v \# \. \# \. \# \# \# \v \# \. \# \. \# \# \# \. \#]
    [\# \. \. \. \. \. \# \. \. \. \# \. \. \. \# \. \# \. \# \. \. \. \#]
    [\# \. \# \# \# \# \# \# \# \# \# \. \# \# \# \. \# \. \# \. \# \# \#]
    [\# \. \. \. \# \# \# \. \. \. \# \. \. \. \# \. \. \. \# \. \# \# \#]
    [\# \# \# \. \# \# \# \. \# \. \# \# \# \v \# \# \# \# \# \v \# \# \#]
    [\# \. \. \. \# \. \. \. \# \. \# \. \> \. \> \. \# \. \> \. \# \# \#]
    [\# \. \# \# \# \. \# \# \# \. \# \. \# \# \# \. \# \. \# \v \# \# \#]
    [\# \. \. \. \. \. \# \# \# \. \. \. \# \# \# \. \. \. \# \. \. \. \#]
    [\# \# \# \# \# \# \# \# \# \# \# \# \# \# \# \# \# \# \# \# \# \. \#]]))

(def d23-s01-graph
  {[1 0]   {[3 5] 15}
   [3 5]   {[5 13] 22  [11 3] 22}
   [5 13]  {[13 19] 38 [13 13] 12}
   [11 3]  {[13 13] 24 [21 11] 30}
   [13 13] {[13 19] 10 [21 11] 18}
   [13 19] {[19 19] 10}
   [21 11] {[19 19] 10}
   [19 19] {[21 22] 5}})

(def d23-s01-graph-full
  {[1 0]   {[3 5]   15}
   [3 5]   {[1 0]   15 [5 13]  22 [11 3]  22}
   [5 13]  {[3 5]   22 [13 19] 38 [13 13] 12}
   [13 19] {[5 13]  38 [19 19] 10 [13 13] 10}
   [11 3]  {[3 5]   22 [13 13] 24 [21 11] 30}
   [13 13] {[5 13]  12 [11 3]  24 [13 19] 10 [21 11] 18}
   [19 19] {[13 19] 10 [21 22] 5  [21 11] 10}
   [21 11] {[19 19] 10 [11 3]  30 [13 13] 18}
   [21 22] {[19 19] 5}})

(deftest parse-test
  (testing "Correctly parses the input"
    (is (= d23-s01 (t/parse d23-s01-raw)))))

(deftest trace-maze-test
  (testing "Explores the maze and returns a map representation
            of a DAG representing the vertices"
    (is (= d23-s01-graph (t/trace-maze d23-s01 {:pos [1 0] :heading :n})))))

(deftest full-graph-test
  (testing "Adds the reverse edges to the graph"
    (is (= d23-s01-graph-full (t/full-graph d23-s01-graph)))))

(deftest longest-possible-path-test
  (testing "Finds the longest possible path through the maze"
    (is (= 94 (t/longest-downslope-path d23-s01)))
    (is (= 154 (t/longest-full-path d23-s01)))))

(def day23-input (u/parse-puzzle-input t/parse 2023 23))

(deftest day23-part1-soln
  (testing "Reproduces the answer for day23, part1"
    (is (= 2334 (t/day23-part1-soln day23-input)))))

(deftest ^:slow day23-part2-soln
  (testing "Reproduces the answer for day23, part2"
    (is (= 6422 (t/day23-part2-soln day23-input)))))